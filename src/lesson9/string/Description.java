package lesson9.string;

/**
 * 1. Определение.
 * Строка представляет собой последовательность символов.
 * Для работы со строками в Java определен класс String, который предоставляет ряд методов для манипуляции строками.
 * Физически объект String представляет собой ссылку на область в памяти, в которой размещены символы.
 * Входит в основной пакет java.lang.String.
 *
 * 2. Создание (показать конструкторы).
 * Для создания новой строки мы можем использовать один из конструкторов класса String,
 * либо напрямую присвоить строку в двойных кавычках.
 *
 * 3. String pool (нарисовать на доске распределение в памяти).
 * При работе со строками важно понимать, что объект String является неизменяемым (immutable).
 * То есть при любых операциях над строкой, которые изменяют эту строку, фактически будет создаваться новая строка.
 * Пул строк - набор строк, который хранится в памяти heap.
 *
 * 4. Преобразование
 *
 * 5. Основные методы.
 * length(): возвращает длину строки
 * concat(): объединяет строки
 * valueOf(): преобразует объект в строковый вид
 * join(): соединяет строки с учетом разделителя
 * сompare() и compareTo(): сравнивает две строки
 * charAt(): возвращает символ строки по индексу
 * getChars(): возвращает группу символов
 * equals(): сравнивает строки с учетом регистра
 * equalsIgnoreCase(): сравнивает строки без учета регистра
 * regionMatches(): сравнивает подстроки в строках
 * indexOf(): находит индекс первого вхождения подстроки в строку
 * lastIndexOf(): находит индекс последнего вхождения подстроки в строку
 * startsWith(): определяет, начинается ли строка с подстроки
 * endsWith(): определяет, заканчивается ли строка на определенную подстроку
 * replace(): заменяет в строке одну подстроку на другую
 * trim(): удаляет начальные и конечные пробелы
 * split(regex): делит строки на подстроки по заданному символу
 * substring(): возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса
 * toLowerCase(): переводит все символы строки в нижний регистр
 * toUpperCase(): переводит все символы строки в верхний регистр
 * format(): форматирование строки
 * repeat(): повторение строки определенное количество раз
 *
 * 6. StringBuilder & StringBuffer.
 * 6.1. Строки являются неизменными, поэтому частая их модификация приводит к созданию новых объектов,
 * что в свою очередь расходует драгоценную память.
 * Для решения этой проблемы был создан класс java.lang.StringBuffer, который позволяет более эффективно
 * работать над модификацией строки. Класс является mutable, то есть изменяемым — используйте его, если Вы
 * хотите изменять содержимое строки. StringBuffer может быть использован в многопоточных средах,
 * так как все необходимые методы являются синхронизированными.
 *
 * 6.2. StringBuilder — класс, что представляет изменяемую последовательность символов.
 * Класс был введен в Java 5 и имеет полностью идентичный API с StringBuffer.
 * Единственное отличие — StringBuilder не синхронизирован.
 * Это означает, что его использование в многопоточных средах есть нежелательным.
 * Следовательно, если вы работаете с многопоточностью, Вам идеально подходит StringBuffer,
 * иначе используйте StringBuilder, который работает намного быстрее в большинстве реализаций.
 *
 * 6.3. Основные методы:
 * length(): позволяет получить текущую длину объекта
 * capacity(): позволяет получить текущий объём выделенной памяти
 * charAt(int index): извлечь значение отдельного символа
 * append (String str): присоединяет строку str в конец данной строки
 * insert (int index, string str): вставляет строку str в данную строку перед символом с индексом index
 * delete (int begin, int end): удаляет из строки символы с индекса begin включительно  до индекса end-1
 * deleteCharAt (int index): удаляет символ с указанным индексом index
 * replace (int begin, int end, String str): удаляет символы из строки, начиная с индекса begin  до индекса end-1
   и вставляет вместо них строку str
 * reverse(): меняет порядок в StringBuffer на обратный
 * substring(): обрезает строку по заданным индексам
 *
 * 7. Задавать вопросы на собеседовании, поспрашивать лично у всех.
 *
 * @author Kamila Meshcheryakova
 * created 02.08.2020
 */
public class Description {
}
