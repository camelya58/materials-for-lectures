package module02.lesson4;

/**
 * источник: http://proglang.su/java/modifiers.
 1. Определение Модификаторов.
 Модификаторы — ключевые слова, которые Вы добавляете при инициализации
 для изменения значений.
 Язык Java имеет широкий спектр модификаторов, основные из них:
 * модификаторы доступа;
 * модификаторы класса, метода, переменной и потока, используемые не для доступа.

 Чтобы использовать модификатор в Java, нужно включить его ключевое слово
 в определение класса, метода или переменной.
 *
 2. Виды модификаторов.
 * public;
 * package;
 * protected;
 * private.
 *
 3. Обеспечение доступа к private переменным через конструктор и getter-setter.
 *
 4. Правила контроля доступа и наследования методов:
 * Методы, объявленные как public в суперклассе, также должны быть public во всех подклассах.
 * Методы, объявленные как protected в суперклассе, должны либо быть либо protected,
 * либо public в подклассах; они не могут быть private.
 * Методы, объявленные как private для всех не наследуются.
 *
 5. Java предоставляет ряд модификаторов не для доступа, а для реализации
 многих других функциональных возможностей:
 * модификатор static применяется для создания методов и переменных класса;
 * модификатор final используется для завершения реализации классов,
 методов и переменных;
 * модификатор abstract необходим для создания абстрактных классов и методов;
 * модификаторы synchronized и volatile используются в Java для потоков.
 *
 Статические методы не подлежат переопределению в классах-потомках. Во время наследования происходит перекрытие
 родительского статического метода другим методом, который описан в классе-потомке.
 *
 6. Типы переменных.
 * переменные экземпляра (instance variables);
 * переменные класса (class variables);
 * локальные переменные (local variables);
 * параметры (parameters).
 *
 7. Область видимости переменных.
 *
 8. Различия передачи примитивных и ссылочных данных.(Primitive, Reference, Cat)
 *
 Передача по ссылке подразумевает передачу ссылки на объект. В этом случае реализация метода потенциально может
 модифицировать переданный объект (например, вызвав метод, изменяющий состояние объекта).
 В случае передачи по значению параметр копируется. Изменение параметра не будет заметно на вызывающей стороне.
 В Java объекты всегда передаются по ссылке, а примитивы - по значению
 *
 9. Если будет время, то разобрать порядок инициализации (конструкторов, статических
 и нестатических переменных, статических и нестатических блоков). (Initialization)
 *
 5
 1
 2
 4
 3
 Конструктор
 *
 10. Вопросы к собеседованиям задать.
 * 1) Можно ли получить доступ к private переменным?
 * 2) В чем разница между статической и нестатической переменной?
 * 3) Привести пример использования статических методов? (Arrays)
 * 4) Какой модификатор следует использовать для переменных, а какой для методов?
 * 4) Для чего в java статические блоки?
 */
public class AccessModifiers {
}
