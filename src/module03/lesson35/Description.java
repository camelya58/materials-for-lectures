package module03.lesson35;

/**
 * Input and output streams.
 * 0. Введение.
 * Stream - поток для работы с файлами, упорядоченная последовательность данных.
 *
 * Потоки могут считывать побитово - byte streams или посимвольно - character streams.
 *
 * Классы находятся в пакете java.io.
 *
 * 1. InputStream и OutputStream - абстрактные классы для байтовых потоков.
 *
 * 2. InputStream
 * Для чтения байтов.
 *
 * 2.1. Методы:
 * - int read(byte[] buff) — метод сразу читает блок байт в буфер (массив байт),
 * пока буфер не заполнится или не закончатся байты там, откуда он их читает.
 * Метод возвращает количество реально прочитанных байт (оно может быть меньше длины массива)
 *
 * - int read() — метод читает один байт и возвращает его как результат. Результат расширяется до int, для красоты.
 * Если все байты уже прочитаны, метод вернет «-1».
 *
 * - int available() — метод возвращает количество непрочитанных (доступных) байт.
 *
 * - void close() — метод «закрывает» поток – вызывается после окончания работы с потоком.
 * Объект выполняет служебные операции, связанные с закрытием файла на диске и т.д.
 * Из потока больше нельзя читать данные.
 *
 * 2.2. Популярные реализации:
 * BufferedInputStream - Буферизированный входной поток
 *
 * ByteArrayInputStream - Позволяет использовать буфер в памяти (массив байтов) в качестве источника данных для входного потока.
 *
 * DataInputStream - Входной поток, включающий методы для чтения стандартных типов данных Java
 *
 * FileInputStream - Для чтения информации из файла
 *
 * FilterInputStream - Абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства.
 *
 * ObjectInputStream - Входной поток для объектов
 *
 * StringBufferInputStream - Превращает строку (String) во входной поток данных InputStream
 *
 * PipedInputStream - Реализует понятие входного канала.
 *
 * PushbackInputStream - Входной поток, поддерживающий однобайтовый возврат во входной поток
 *
 * SequenceInputStream - Сливает два или более потока InputStream в единый поток
 *
 * 3. OutputStream
 * Для записи байтов.
 *
 * 3.1. Методы:
 * - void write(int c) — метод записывает один байт информации.
 * Тип int сужается до byte, лишняя часть просто отбрасывается.
 *
 * - void write(byte[] buff) — метод записывает блок байт.
 *
 * - void write(byte[] buff, int from, int count) — метод записывает часть блока байт.
 * Используется в случаях, когда есть вероятность, что блок данных был заполнен не целиком.
 *
 * - void flush() — если есть данные, которые хранятся где-то внутри и еще не записаны, то они записываются.
 *
 * - void close() — метод «закрывает» поток – вызывается после окончания работы с потоком.
 * Объект выполняет служебные операции, связанные с закрытием файла на диске и т.д.
 * В поток больше нельзя писать данные, flush при этом вызывается автоматически.
 *
 * 3.2. Популярные реализации:
 * BufferedOutputStream - Буферизированный выходной поток.
 *
 * ByteArrayOutputStream - Создает буфер в памяти. Все данные, посылаемые в этот поток, размещаются в созданном буфере
 *
 * DataOutputStream - Выходной поток, включающий методы для записи стандартных типов данных Java.
 *
 * FileOutputStream - Отправка данных в файл на диске.
 *
 * ObjectOutputStream - Выходной поток для объектов
 *
 * PipedOutputStream - Реализует понятие выходного канала.
 *
 * FilterOutputStream - Абстрактный класс, предоставляющий интерфейс для классов-надстроек,
 * которые добавляют к существующим потокам полезные свойства.
 *
 * PrintStream - для вывода в консоль
 *
 * 4. Reader и Writer - абстрактные классы для символьных потоков.
 *
 * 5. Reader
 * Для чтения символов.
 *
 * 5.1. Методы:
 * abstract void close() - закрывает входной поток. Последующие попытки чтения передадут исключение IOException
 * void mark(int readLimit) - помещает метку в текущую позицию во входном потоке
 * boolean markSupported() - возвращает true, если поток поддерживает методы mark() и reset()
 * int read() - возвращает целочисленное представление следующего доступного символа вызывающего входного потока. При достижении конца файла возвращает значение -1. Есть и другие перегруженные версии метода
 * boolean ready() - возвращает значение true, если следующий запрос не будет ожидать.
 * void reset() - сбрасывает указатель ввода в ранее установленную позицию метки
 * logn skip(long charCount) - пропускает указанное число символов ввода, возвращая количество действительно пропущенных символов
 *
 * 5.2. Популярные реализации:
 * BufferedReader - Буферизированный входной символьный поток
 *
 * CharArrayReader - Входной поток, который читает из символьного массива
 *
 * FileReader - Входной поток, читающий файл
 *
 * FilterReader - Фильтрующий читатель
 *
 * InputStreamReader - Входной поток, транслирующий байты в символы
 *
 * LineNumberReader - Входной поток, подсчитывающий строки
 *
 * PipedReader - Входной канал
 *
 * PushbackReader - Входной поток, позволяющий возвращать символы обратно в поток
 *
 * StringReader - Входной поток, читающий из строки
 *
 * 6. Writer
 * Для записи символов.
 *
 * 6.1. Методы:
 * Writer append(char c) - добавляет символ в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток
 * Writer append(CharSequence csq) - добавляет символы в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток
 * Writer append(CharSequence csq, int start, int end) - добавляет диапазон символов в конец вызывающего выходного потока. Возвращает ссылку на вызывающий поток
 * abstract void close() - закрывает вызывающий поток
 * abstract void flush() - финализирует выходное состояние так, что все буферы очищаются
 * void write(int oneChar) - записывает единственный символ в вызывающий выходной поток. Есть и другие перегруженные версии метода
 *
 * 6.2. Популярные реализации:
 * BufferedWriter - Буферизированный выходной символьный поток
 *
 * CharArrayWriter - Выходной поток, который пишет в символьный массив
 *
 * FileWriter - Выходной поток, пишущий в файл
 *
 * FilterWriter - Фильтрующий писатель
 *
 * OutputStreamWriter - Выходной поток, транслирующий байты в символы
 *
 * PipedWriter - Выходной канал
 *
 * PrintWriter - Выходной поток, включающий методы print() и println()
 *
 * StringWriter - Выходной поток, пишущий в строку
 *
 * @author Kamila Meshcheryakova
 * created 08.11.2020
 */
public class Description {
}
