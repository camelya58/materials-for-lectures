package module03.lesson33;

/**
 * Структурные паттерны
 * 1. Определение паттерна.
 * Шаблон проектирования, или паттерн, в разработке программного обеспечения — повторяемая архитектурная конструкция,
 * представляющая собой решение проблемы проектирования, в рамках некоторого часто возникающего контекста.
 *
 * 2. Структурные паттерны
 * Структурные шаблоны — шаблоны проектирования, в которых рассматривается вопрос о том,
 * как из классов и объектов образуются более крупные структуры.
 *
 * Список структурных шаблонов проектирования:
  - адаптер (Adapter);
  - компоновщик (Composite);
  - декоратор (Decorator);
  - фасад (Facade);
  - мост (Bridge);
  - приспособленец (Flyweight);
  - заместитель (Proxy).
 *
 * 3. Adapter
 * Адаптер — структурный шаблон проектирования, предназначенный для организации использования функций объекта,
 * недоступного для модификации, через специально созданный интерфейс.
 *
 * Пример из жизни: Представим, что у вас на карте памяти есть какие-то изображения и вам надо перенести их на
 * ваш компьютер. Чтобы это сделать, вам нужен какой-то адаптер, который совместим с портами вашего компьютера.
 * В этом случае карт-ридер — это адаптер.
 *
 * Шаблон позволяет обернуть несовместимые объекты в адаптер, чтобы сделать их совместимыми с другим классом.
 *
 * 4. Composite
 * Компоновщик — структурный шаблон проектирования, объединяющий объекты в древовидную структуру для представления
 * иерархии от частного к целому. Компоновщик позволяет клиентам обращаться к отдельным объектам и к группам объектов
 * одинаково. Паттерн определяет иерархию классов, которые одновременно могут состоять из примитивных и сложных
 * объектов, упрощает архитектуру клиента, делает процесс добавления новых видов объекта более простым.
 *
 * Пример из жизни: Каждая организация скомпонована из сотрудников. У каждого сотрудника есть одинаковые свойства,
 * такие как зарплата, обязанности, отчётность и т.д.
 *
 * Группирует несколько объектов в древовидную структуру используя один класс.
 * Позволяет работать с несколькими классами через один объект.
 *
 * 5. Decorator
 * Декоратор — структурный шаблон проектирования, предназначенный для динамического подключения дополнительного
 * поведения к объекту. Шаблон декоратор предоставляет гибкую альтернативу практике создания подклассов с целью
 * расширения функциональности.
 *
 * Пример из жизни: Представим, что у вас есть свой автосервис. Как вы будете рассчитывать сумму в счете за услуги?
 * Вы выбираете одну услугу и динамически добавляете к ней цены на предоставляемые услуги, пока не получите
 * окончательную стоимость. Здесь каждый тип сервиса является декоратором.
 *
 * Добавляет новые функциональные возможности существующего объекта без привязки его структуры.
 *
 * 6. Facade
 * Фасад — структурный шаблон проектирования, позволяющий скрыть сложность системы путём сведения всех возможных
 * внешних вызовов к одному объекту, делегирующему их соответствующим объектам системы.
 *
 * Пример из жизни: Как вы включаете компьютер? Нажимаю на кнопку включения, скажете вы. Это то, во что вы верите,
 * потому что вы используете простой интерфейс, который компьютер предоставляет для доступа снаружи.
 * Внутри же должно произойти гораздо больше вещей. Этот простой интерфейс для сложной подсистемы называется фасадом.
 *
 *  Шаблон фасад cкрывает сложную систему классов приводя все вызовы к одному объекту.
 *  Помещает вызов нескольких сложных объектов в один объект.
 *
 * @author Kamila Meshcheryakova
 * created 01.11.2020
 */
public class Description {
}
