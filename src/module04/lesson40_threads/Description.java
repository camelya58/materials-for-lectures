package module04.lesson40_threads;

/**
 * Introduction to multithreaded programming. Create and run threads. Volatile, synchronized, wait, notify.
 * 1. Определение  Thread.
 * Принято называть нитями (дословный перевод) или программными потоками.
 * В противовес stream’ам, которые называют потоками ввода-вывода.
 *
 * Многопоточность - это принцип построения программы, при котором несколько блоков кода могут выполняться одновременно.
 *
 * Цели многопоточности:
 * - увеличение производительности;
 * - параллельное выполнение функций.
 *
 * 2. Жизненный цикл Thread.
 * - new - при создании нити;
 * - runnable - после вызова метода start():
 *      - ready - в режиме готовности к run():
 *              - time waiting - в режиме ожидания на определенное время;
 *              - waiting - в режиме ожидания;
 *              - blocked - при входе в блок synchronized;
 *      - running - выполнение run();
 * - terminated - после завершения работы.
 *
 * см. original.jpeg
 *
 * public enum State {
 *  NEW,
 *  RUNNABLE,
 *  BLOCKED,
 *  WAITING,
 *  TIMED_WAITING,
 *  TERMINATED;
 * }
 * class ThreadStates
 *
 * 2.1. Приоритеты потоков
 * Каждый поток Java имеет приоритет, который помогает операционной системе определять порядок,
 * в котором планируются потоки.
 *
 * Приоритеты потоков Java находятся в диапазоне от MIN_PRIORITY (константа 1) до MAX_PRIORITY (константа 10).
 * По умолчанию каждому потоку устанавливается приоритет NORM_PRIORITY (константа 5).
 *
 * Потоки с более высоким приоритетом более важны для программы, и в первую очередь им должно выделяться процессорное
 * время. Однако приоритеты потоков не могут гарантировать порядок, в котором выполняются потоки,
 * и очень сильно зависят от платформы.
 *
 * 3. Способы создания нитей.
 * Когда мы создаем объект типа Thread, нить при этом еще не создается.
 * Thread – это не нить, нить создаст сама Java-машина, когда будет вызван метод start().
 * А Thread — это специальный объект Java-машины, который позволяет получать информацию о нити и немного управлять ей.
 *
 * - Наследование от Thread. - class ThreadCreation
 *
 * - Реализация Runnable. - class ThreadRunnable
 *
 * 3.1. Обработка исключений, вызванных в другом трэде.
 * Интерфейс UncaughtExceptionHandler.
 *
 * class CaughtExceptions
 *
 * 4. Ключевые слова и методы thread "volatile", "synchronized", "sleep", "wait", "notify", "join", "yield" и их особенности.
 * - sleep(timeout) - останавливает текущую нить на timeout миллисекунд;
 * - yield() - текущая нить пропускает свой ход, JVM приступает к выполнению следующей нити.
 * - wait() и wait(timeout) - метод можно вызвать только внутри блока synchronized у объекта-мьютекса,
 * который был заблокирован текущей нитью, в противном случае метод выкинет исключение IllegalMonitorStateException
 *
 * в результате вызова метода снимается блокировка с объекта-мьютекссса и он становится доступен для захваа и блокировки другой нитью.
 *
 * - join() и join(timeout) - текущая нить присоединяется к нити, у объекта которой был вызван этот метод
 *
 * 5. Понятие "мьютекс", "монитор" и "семафор".
 *
 * 6. Взаимная блокировка.
 * Взаимная блокировка описывает ситуацию, когда два или более потока блокируются, ожидая друг друга.
 * Взаимная блокировка возникает, когда нескольким потокам нужны одинаковые блокировки, но они получают их
 * в разном порядке. Многопоточная программа Java может пострадать от состояния взаимоблокировки, поскольку
 * ключевое слово synchronized заставляет выполняющийся поток блокироваться в ожидании блокировки или монитора,
 * связанного с указанным объектом.
 * http://proglang.su/java/thread-deadlock
 *
 * 7. Вопросы на собеседовании.
 *
 *
 * @author Kamila Meshcheryakova
 * created by 20.11.2020
 */
public class Description {
}
